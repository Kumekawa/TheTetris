#pragma once
#include "block.h"

enum eminoshape {
	eMS_I,
	eMS_O,
	eMS_J,
	eMS_L,
	eMS_S,
	eMS_Z,
	eMS_T
};
//基準はI型
enum edirection {
	eD_up,
	eD_left,
	eD_right,
	eD_down
};

static const int shapeSize = 5;
//1個目:ミノの方向
//2,3個目:ミノの具体的な形
static int minoShapes[7][4][shapeSize][shapeSize] = 
{
	{	
		{
			{0,0,1,0,0},
			{0,0,1,0,0},
			{0,0,2,0,0},
			{0,0,1,0,0},
			{0,0,0,0,0},
		},
		{
			{0,0,0,0,0},
			{0,0,0,0,0},
			{1,1,2,1,0},
			{0,0,0,0,0},
			{0,0,0,0,0},
		},
		{
			{0,0,0,0,0},
			{0,0,0,0,0},
			{0,1,2,1,1},
			{0,0,0,0,0},
			{0,0,0,0,0},
		},
		{
			{0,0,0,0,0},
			{0,0,1,0,0},
			{0,0,2,0,0},
			{0,0,1,0,0},
			{0,0,1,0,0},
		},
	},
	{
		{
			{0,0,0,0,0},
			{0,0,1,1,0},
			{0,0,2,1,0},
			{0,0,0,0,0},
			{0,0,0,0,0},
		},
		{
			{0,0,0,0,0},
			{0,0,1,1,0},
			{0,0,2,1,0},
			{0,0,0,0,0},
			{0,0,0,0,0},
		},
		{
			{0,0,0,0,0},
			{0,0,1,1,0},
			{0,0,2,1,0},
			{0,0,0,0,0},
			{0,0,0,0,0},
		},
		{
			{0,0,0,0,0},
			{0,0,1,1,0},
			{0,0,2,1,0},
			{0,0,0,0,0},
			{0,0,0,0,0},
		},
	},	
	{	
		{
			{0,0,1,0,0},
			{0,0,1,0,0},
			{0,1,2,0,0},
			{0,0,0,0,0},
			{0,0,0,0,0},
		},
		{
			{0,0,0,0,0},
			{0,0,0,0,0},
			{1,1,2,0,0},
			{0,0,1,0,0},
			{0,0,0,0,0},
		},
		{
			{0,0,0,0,0},
			{0,0,1,0,0},
			{0,0,2,1,1},
			{0,0,0,0,0},
			{0,0,0,0,0},
		},
		{
			{0,0,0,0,0},
			{0,0,0,0,0},
			{0,0,2,1,0},
			{0,0,1,0,0},
			{0,0,1,0,0},
		},
	},
	{
		{
			{0,0,1,0,0},
			{0,0,1,0,0},
			{0,0,2,1,0},
			{0,0,0,0,0},
			{0,0,0,0,0},
		},
		{
			{0,0,0,0,0},
			{0,0,1,0,0},
			{1,1,2,0,0},
			{0,0,0,0,0},
			{0,0,0,0,0},
		},
		{
			{0, 0, 0, 0, 0},
			{ 0,0,0,0,0 },
			{ 0,0,2,1,1 },
			{ 0,0,1,0,0 },
			{ 0,0,0,0,0 },
		},
		{	
			{0,0,0,0,0},
			{0,0,0,0,0},
			{0,1,2,0,0},
			{0,0,1,0,0},
			{0,0,1,0,0},
		},
	}, 
	{	
		{
			{0,0,0,0,0},
			{0,0,1,1,0},
			{0,1,2,0,0},
			{0,0,0,0,0},
			{0,0,0,0,0},
		},
		{
			{0,0,0,0,0},
			{0,1,0,0,0},
			{0,1,2,0,0},
			{0,0,1,0,0},
			{0,0,0,0,0},
		},
		{
			{0,0,0,0,0},
			{0,0,1,1,0},
			{0,1,2,0,0},
			{0,0,0,0,0},
			{0,0,0,0,0},
		},
		{
			{0,0,0,0,0},
			{0,1,0,0,0},
			{0,1,2,0,0},
			{0,0,1,0,0},
			{0,0,0,0,0},
		},
	}, 

	{
		{
			{0,0,0,0,0},
			{0,1,1,0,0},
			{0,0,2,1,0},
			{0,0,0,0,0},
			{0,0,0,0,0},
		},
			{
			{0,0,0,0,0},
			{0,0,0,1,0},
			{0,0,2,1,0},
			{0,0,1,0,0},
			{0,0,0,0,0},
		},
		{
			{0,0,0,0,0},
			{0,1,1,0,0},
			{0,0,2,1,0},
			{0,0,0,0,0},
			{0,0,0,0,0},
		},
		{
			{0,0,0,0,0},
			{0,0,0,1,0},
			{0,0,2,1,0},
			{0,0,1,0,0},
			{0,0,0,0,0},
		},
	}, 
	{
		{
			{0,0,0,0,0},
			{0,0,1,0,0},
			{0,1,2,1,0},
			{0,0,0,0,0},
			{0,0,0,0,0},
		},
		{
			{0,0,0,0,0},
			{0,0,1,0,0},
			{0,1,2,0,0},
			{0,0,1,0,0},
			{0,0,0,0,0},
		},
		{
			{0,0,0,0,0},
			{0,0,1,0,0},
			{0,0,2,1,0},
			{0,0,1,0,0},
			{0,0,0,0,0},
		},
		{
			{0,0,0,0,0},
			{0,0,0,0,0},
			{0,1,2,1,0},
			{0,0,1,0,0},
			{0,0,0,0,0},
		},
	} 
};


position *GetShapePosition(eminoshape eMinoShape,position center,edirection eDirection) {
	position pos[4];
	for (int i = 0; i < 4; ++i) {
		pos[i] = center;
	}

	int k = 1;
	for (int i = 0; i < shapeSize; ++i) {
		for (int j = 0; j < shapeSize; ++j) {
			if (minoShapes[eMinoShape][eDirection][i][j] == 1) {
				pos[k].x += i - shapeSize / 2;
				pos[k].y += j + shapeSize / 2;
				k++;
				if (k >= 4) {
					return pos;
				}
			}
		}
	}
}

struct mino {
	static const int blocksSize = 4;

	eminoshape eMinoShape;
	edirection eDirection;

	//0個目をセンターとする。
	block block[blocksSize];

	void SetBlocks(eminoshape eMinoShape,position center) {
		position *pos = GetShapePosition(eMinoShape, center, eD_up);
		for (int i = 0; i < 4; ++i) {
			block[i].pos = pos[i];
		}
	}
};

